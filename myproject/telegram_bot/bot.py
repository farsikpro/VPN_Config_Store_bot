import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)
from django.conf import settings
from django.utils import timezone
from .models import Client, VPNConfig
from asgiref.sync import sync_to_async
import qrcode
from io import BytesIO
import html
import os

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

TOKEN = ''
OWNER_TELEGRAM_ID = ''

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [['–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä'], ['–°—Ç–∞—Ç—É—Å'], ['–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'], ['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=reply_markup)

async def buy_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = (
        '–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:\n'
        '1 –º–µ—Å—è—Ü = 100—Ä\n\n'
        '–†–µ–∫–≤–∏–∑–∏—Ç—ã:\n'
        '–°–±–µ—Ä ‚Äî 2202 2050 7610 7470\n\n'
        '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–± –æ–ø–ª–∞—Ç–µ.'
    )
    await update.message.reply_text(message)

async def receive_payment_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        await context.bot.send_message(
            chat_id=OWNER_TELEGRAM_ID,
            text=f"–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç {update.message.from_user.id}"
        )
        await context.bot.forward_message(
            chat_id=OWNER_TELEGRAM_ID,
            from_chat_id=update.message.chat_id,
            message_id=update.message.message_id
        )
        await update.message.reply_text('–°–ø–∞—Å–∏–±–æ! –í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.')
    else:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.')

async def check_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        client = await sync_to_async(Client.objects.get)(telegram_id=str(update.message.from_user.id))
        now = timezone.now()
        if client.subscription_end and client.subscription_end > now:
            remaining_time = client.subscription_end - now
            days = remaining_time.days
            hours = remaining_time.seconds // 3600
            minutes = (remaining_time.seconds % 3600) // 60

            # –û–±–µ—Ä–Ω—É—Ç—å –¥–æ—Å—Ç—É–ø –∫ assigned_config
            assigned_config = await sync_to_async(lambda: client.assigned_config)()

            if assigned_config:
                config_name = assigned_config.name
            else:
                config_name = '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'

            await update.message.reply_text(
                f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞.\n'
                f'–û—Å—Ç–∞–ª–æ—Å—å: {days} –¥–Ω. {hours} —á. {minutes} –º–∏–Ω.\n'
                f'–í–∞—à –∫–æ–Ω—Ñ–∏–≥: {config_name}'
            )
        else:
            await update.message.reply_text('–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.')
    except Client.DoesNotExist:
        logger.error(f"–ö–ª–∏–µ–Ω—Ç —Å ID {update.message.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        await update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.')
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}: {e}")
        await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

async def send_vpn_config(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /send_config –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}")

    if str(update.message.from_user.id) != str(OWNER_TELEGRAM_ID):
        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è /send_config –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        await update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    args = context.args
    if not args:
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send_config TELEGRAM_ID [–î–ù–ò]')
        return

    telegram_id = args[0]
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –∫–ª–∏–µ–Ω—Ç—É {telegram_id}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
    if len(args) >= 2:
        try:
            days = int(args[1])
        except ValueError:
            await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.')
            return
    else:
        days = 30  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –¥–Ω–µ–π

    # –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
    client, created = await sync_to_async(Client.objects.get_or_create)(telegram_id=telegram_id)

    # –û–±–µ—Ä–Ω–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ client.assigned_config
    assigned_config = await sync_to_async(lambda: client.assigned_config)()

    if assigned_config:
        vpn_config = assigned_config
    else:
        # –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
        vpn_config = await sync_to_async(get_next_available_config)()
        if not vpn_config:
            await update.message.reply_text('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.')
            return
        client.assigned_config = vpn_config
        vpn_config.is_assigned = True
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
        await sync_to_async(vpn_config.save)()
        await sync_to_async(client.save)()

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∫–ª–∏–µ–Ω—Ç—É
    try:
        config_text = vpn_config.config_text

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(config_text)
        qr.make(fit=True)
        img = qr.make_image(fill_color="black", back_color="white")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±—É—Ñ–µ—Ä
        buffer = BytesIO()
        img.save(buffer, format='PNG')
        buffer.seek(0)

        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML-—Å–∏–º–≤–æ–ª–æ–≤ –≤ config_text
        config_text_escaped = html.escape(config_text)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–µ–≥–∞ <pre> –¥–ª—è –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
        message_text = f'<pre>{config_text_escaped}</pre>'

        await context.bot.send_message(
            chat_id=telegram_id,
            text=message_text,
            parse_mode='HTML'
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ QR-–∫–æ–¥–∞
        await context.bot.send_photo(
            chat_id=telegram_id,
            photo=buffer,
            caption='QR-–∫–æ–¥ –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞.'
        )

        logger.info(f"–ö–æ–Ω—Ñ–∏–≥ {vpn_config.name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É {telegram_id}")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ñ–∏–≥–∞ –∫–ª–∏–µ–Ω—Ç—É {telegram_id}: {e}")
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∫–ª–∏–µ–Ω—Ç—É {telegram_id}.")
        return

    # –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    now = timezone.now()
    if client.subscription_end and client.subscription_end > now:
        client.subscription_end += timezone.timedelta(days=days)
    else:
        client.subscription_start = now
        client.subscription_end = now + timezone.timedelta(days=days)

    client.notified = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await sync_to_async(client.save)()
    logger.info(f"–ö–ª–∏–µ–Ω—Ç {telegram_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ {client.subscription_end}")

    await update.message.reply_text(
        f'–ö–æ–Ω—Ñ–∏–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É {telegram_id}.\n–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {client.subscription_end.strftime("%d.%m.%Y %H:%M:%S")}.'
    )

def get_next_available_config():
    return VPNConfig.objects.filter(is_assigned=False).first()
async def unknown_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('is_asking_question'):
        question = update.message.text
        user_id = update.message.from_user.id
        user_name = update.message.from_user.first_name

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤–ª–∞–¥–µ–ª—å—Ü—É
        await context.bot.send_message(
            chat_id=OWNER_TELEGRAM_ID,
            text=f"üì© *–í–æ–ø—Ä–æ—Å –æ—Ç {user_name} (ID: {user_id}):*\n{question}",
            parse_mode='Markdown'
        )

        await update.message.reply_text('–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç.')
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        context.user_data['is_asking_question'] = False
    else:
        await update.message.reply_text('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.')

async def reply_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.message.from_user.id) != str(OWNER_TELEGRAM_ID):
        await update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    args = context.args
    if len(args) < 2:
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply USER_ID –í–∞—à –æ—Ç–≤–µ—Ç')
        return

    user_id = args[0]
    reply_text = ' '.join(args[1:])

    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üì® *–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:*\n{reply_text}",
            parse_mode='Markdown'
        )
        await update.message.reply_text(f'–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.')
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await update.message.reply_text(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.')

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞
    context.user_data['is_asking_question'] = True

async def send_instructions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–í–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:')
    files = [
        ('VPN –¥–ª—è Android (v2box).pdf', 'VPN –¥–ª—è Android (v2box).pdf'),
        ('VPN –¥–ª—è iPhone (v2box).pdf', 'VPN –¥–ª—è iPhone (v2box).pdf'),
        ('VPN –¥–ª—è Windows.pdf', 'VPN –¥–ª—è Windows.pdf'),
    ]
    for file_name, caption in files:
        file_path = os.path.join(settings.BASE_DIR, 'instructions', file_name)
        try:
            with open(file_path, 'rb') as file:
                await context.bot.send_document(chat_id=update.effective_chat.id, document=file, caption=caption)
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {file_name}: {e}")
            await update.message.reply_text(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª {file_name}.')

def main():
    application = ApplicationBuilder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('send_config', send_vpn_config))
    application.add_handler(CommandHandler('reply', reply_to_user))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.Regex('^–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä$'), buy_product))
    application.add_handler(MessageHandler(filters.Regex('^–°—Ç–∞—Ç—É—Å$'), check_status))
    application.add_handler(MessageHandler(filters.Regex('^–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å$'), ask_question))
    application.add_handler(MessageHandler(filters.Regex('^–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è$'), send_instructions))
    application.add_handler(MessageHandler(filters.PHOTO, receive_payment_screenshot))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
